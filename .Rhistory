theme(text=element_text(size=20)) +
guides(color=guide_legend(title="Survived"))
ST4=ST3 %>%
mutate(d=apply(select(ST3,Family,Fare),1,dist.func,point2=Z.Alice)) %>%
arrange(d) %>%
filter(rank(d,ties.method="min")<=k)
print(ST4 %>%
mutate(Family=sd.Family*Family+mean.Family,
Fare=sd.Fare*Fare+mean.Fare)
)
ggplot(ST4) +
geom_point(aes(x=Family,y=Fare,color=factor(Survived)))+
geom_point(aes(x=Z.Alice[1],y=Z.Alice[2]),shape="A",size=8)+
theme_minimal()+
xlim(min(ST3$Family),max(ST3$Family))+
ylim(min(ST3$Fare),max(ST3$Fare))+
theme(text=element_text(size=20)) +
guides(color=guide_legend(title="Survived"))
mean.Family=mean(T2$Family)
sd.Family=sd(T2$Family)
mean.Fare=mean(T2$Fare)
sd.Fare=sd(T2$Fare)
ST3= T2 %>%
mutate(Family=(Family-mean.Family)/sd.Family,
Fare=(Fare-mean.Fare)/sd.Fare)
Z.Alice=(Alice-c(mean.Family,mean.Fare))/c(sd.Family,sd.Fare)
ggplot(ST3) +
geom_point(aes(x=Family,y=Fare,color=factor(Survived)),alpha=c(0.3))+
geom_point(aes(x=Z.Alice[1],y=Z.Alice[2]),shape="A",size=8)+
theme_minimal()+
xlim(-1,10)+
ylim(-1,10)+
xlab("Standardized Family")+
ylab("Standardized Fare")+
theme(text=element_text(size=20)) +
guides(color=guide_legend(title="Survived"))
k=300
ST5=ST3 %>%
mutate(d=apply(select(ST3,Family,Fare),1,dist.func,point2=Z.Alice)) %>%
arrange(d) %>%
filter(rank(d,ties.method="min")<=k)
ggplot(ST5) +
geom_point(aes(x=Family,y=Fare,color=factor(Survived)),size=4)+
geom_point(aes(x=Z.Alice[1],y=Z.Alice[2]),shape="A",size=8)+
theme_minimal()+
xlim(-1,10)+
ylim(-1,10)+
theme(text=element_text(size=20)) +
guides(color=guide_legend(title="Survived"))
table(ST5$Survived)
table(ST5$Survived) %>% prop.table()
k=500
ST5=ST3 %>%
mutate(d=apply(select(ST3,Family,Fare),1,dist.func,point2=Z.Alice)) %>%
arrange(d) %>%
filter(rank(d,ties.method="min")<=k)
ggplot(ST5) +
geom_point(aes(x=Family,y=Fare,color=factor(Survived)),size=4)+
geom_point(aes(x=Z.Alice[1],y=Z.Alice[2]),shape="A",size=8)+
theme_minimal()+
xlim(-1,10)+
ylim(-1,10)+
theme(text=element_text(size=20)) +
guides(color=guide_legend(title="Survived"))
KNN.PREDICT=table(ST5$Survived)
KNN.PREDICT
table(ST5$Survived) %>% max()
table(ST5$Survived) %>% which.max()
print(KNN.PREDICT)
library(class)
factor(ST3$Survived,levels=c(0="Died",1="Survived")
factor(ST3$Survived,levels=c(0="Died",1="Survived"))
actor(ST3$Survived,levels=c(0=="Died",1=="Survived"))
factor(ST3$Survived,levels=c(0=="Died",1=="Survived"))
factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived"))
knn.cv(train=select(ST3,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")),
k=k)
k
k=1
knn.cv(train=select(ST3,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")),
k=k)
ggplot(ST4) +
geom_point(aes(x=Family,y=Fare,color=factor(Survived)),size=4)+
geom_point(aes(x=Z.Alice[1],y=Z.Alice[2]),shape="A",size=8)+
theme_minimal()+
xlim(-1,10)+
ylim(-1,10)+
theme(text=element_text(size=20)) +
guides(color=guide_legend(title="Survived"))
cv.out=knn.cv(train=select(ST3,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")),
k=k)
cv.out=knn.cv(train=select(ST3,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")),
k=k)
sum(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))
sum(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))/length(cv.out)
percent.correct=sum(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))/length(cv.out)
percent.correct
correct=sum(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))/length(cv.out)
correct
mean(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))
possible.k=1:15
accuracy.k=rep(NA,15)
for(k in 1:15){
cv.out=knn.cv(train=select(ST3,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")),
k=k)
correct=mean(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))
accuracy.k[k]=correct
}
accuracy.
accuracy.k
possible.k=1:300
accuracy.k=rep(NA,15)
for(k in 1:15){
cv.out=knn.cv(train=select(ST3,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")),
k=k)
correct=mean(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))
accuracy.k[k]=correct
}
ggplot(data=tibble(possible.k,accuracy.k)) +
geom_line(aes(x=possible.k,y=accuracy.k))
possible.k=1:300
accuracy.k=rep(NA,15)
for(k in 1:15){
cv.out=knn.cv(train=select(ST3,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")),
k=k)
correct=mean(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))
accuracy.k[k]=correct
}
ggplot(data=tibble(possible.k,accuracy.k)) +
geom_line(aes(x=possible.k,y=accuracy.k))
tibble(possible.k,accuracy.k)
possible.k
accuracy.k
possible.k=1:300
accuracy.k=rep(NA,300)
for(k in 1:15){
cv.out=knn.cv(train=select(ST3,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")),
k=k)
correct=mean(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))
accuracy.k[k]=correct
}
ggplot(data=tibble(possible.k,accuracy.k)) +
geom_line(aes(x=possible.k,y=accuracy.k))
warning()
accuracy.k
possible.k=1:300
accuracy.k=rep(NA,300)
for(k in 1:300){
cv.out=knn.cv(train=select(ST3,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")),
k=k)
correct=mean(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))
accuracy.k[k]=correct
}
ggplot(data=tibble(possible.k,accuracy.k)) +
geom_line(aes(x=possible.k,y=accuracy.k))
possible.k=1:250
accuracy.k=rep(NA,250)
for(k in 1:250){
cv.out=knn.cv(train=select(ST3,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")),
k=k)
correct=mean(cv.out==factor(ST3$Survived,levels=c(0,1),labels=c("Died","Survived")))
accuracy.k[k]=correct
}
ggplot(data=tibble(possible.k,accuracy.k)) +
geom_line(aes(x=possible.k,y=accuracy.k))
ggplot(data=tibble(possible.k,accuracy.k)) +
geom_line(aes(x=possible.k,y=accuracy.k),color="lightskyblue2",size=2) +
theme_minimal() +
xlab("Choice of k") +
ylab("Percentage of Accurate Predictions")
which.max(accuracy.k)
possible.k[which.max(accuracy.k)]
#4.3
best.k=which.max(accuracy.k)
#4.3
best.k=which.max(accuracy.k)
TEST=titanic_test[,c("SibSp","Parch","Fare")]
TEST
titanic_test[,c("SibSp","Parch","Fare")] %>%
mutate(Family=SibSp+Parch) %>%
select(-SibSp,-Parch)
titanic_test[,c("SibSp","Parch","Fare")] %>%
mutate(Family=SibSp+Parch) %>%
select(-SibSp,-Parch) %>%
mutate(Z.Fare=(Fare-mean.Fare)/sd.Fare,
Z.Family=(Family-mean.Family)/sd.Family)
titanic_test[,c("SibSp","Parch","Fare")] %>%
mutate(Family=SibSp+Parch) %>%
select(-SibSp,-Parch) %>%
mutate(Fare=(Fare-mean.Fare)/sd.Fare,
Family=(Family-mean.Family)/sd.Family)
titanic_test[,c("SibSp","Parch","Fare")] %>%
mutate(Family=SibSp+Parch) %>%
select(-SibSp,-Parch) %>%
mutate(Fare=(Fare-mean.Fare)/sd.Fare,
Family=(Family-mean.Family)/sd.Family)
select(ST3,Family,Fare)
TEST
TEST = titanic_test[,c("SibSp","Parch","Fare")] %>%
mutate(Family=SibSp+Parch) %>%
select(-SibSp,-Parch) %>%
mutate(Fare=(Fare-mean.Fare)/sd.Fare,
Family=(Family-mean.Family)/sd.Family)
TEST
ST3
select(ST3,Family,Fare)
select(TEST,Family,Fare)
TEST %>%
mutate(Predict=knn(train=select(ST3,Family,Fare),
test=select(TEST,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),
labels=c("Died","Survived")),
k=best.k))
select(TEST,Family,Fare)
best.k=which.max(accuracy.k)
TEST = titanic_test[,c("SibSp","Parch","Fare")] %>%
mutate(Family=SibSp+Parch) %>%
select(-SibSp,-Parch) %>%
mutate(Fare=(Fare-mean.Fare)/sd.Fare,
Family=(Family-mean.Family)/sd.Family) %>%
na.omit()
TEST %>%
mutate(Predict=knn(train=select(ST3,Family,Fare),
test=select(TEST,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),
labels=c("Died","Survived")),
k=best.k))
TEST2 = TEST %>%
mutate(Predict=knn(train=select(ST3,Family,Fare),
test=select(TEST,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),
labels=c("Died","Survived")),
k=best.k))
TEST2
TEST2 = TEST %>%
mutate(Predict=knn(train=select(ST3,Family,Fare),
test=select(TEST,Family,Fare),
cl=factor(ST3$Survived,levels=c(0,1),
labels=c("Died","Survived")),
k=best.k)) %>%
mutate(Family=sd.Family*Family+mean.Family,
Fare=sd.Fare*Fare+mean.Fare)
ggplot(TEST2) +
geom_point(aes(x=Family,y=Fare,color=Predict))
ggplot(TEST2) +
geom_point(aes(x=Family,y=Fare,color=Predict),
size=2,alpha=0.3) +
theme_minimal()
ggplot(TEST2) +
geom_point(aes(x=Family,y=Fare,color=Predict),
size=2,alpha=0.3) +
theme_minimal() +
theme(text=element_text(size=20))
ggplot(TEST2) +
geom_point(aes(x=Family,y=Fare,color=Predict),
size=2,alpha=0.3) +
theme_minimal() +
theme(text=element_text(size=20))
shiny::runApp('Tutorial/Tutorial 17/Previous/beer2burpees')
x=c(172,228,161,163,165,245,206,232,235,
242,206,223,195,195,245,196,177,184)
sort(x)
x[9]
x[10]
(235+242)/2
sort(x)
x[9]
x=sort(x)
x[9]
x[10]
(196+206)/2
median(x)
quantile(x,0.25)
x=sort(x)
x[1:9]
x[10:18]
232+1.5*(232-177)
x=c(244,180,234,170,248,234,193,167,169,
198,175,162,173,195,238,224,201,240)
x=sort(x)
median(x)
x=c(244,180,234,170,248,234,193,167,169,
198,175,162,173,195,238,224,201,240)
x=sort(x)
median(x)
median(x[1:9])
median(x[10:18])
238+1.5*(234-173)
234+1.5*(234-173)
library(tidyverse)
who
who=who
View(who)
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(modelr)       #Helpful Functions in Modeling
DATA=read_csv("AirWaterTemp.csv",col_types=cols()) #River Data
Location = 103
DATA %>% filter(L==Location) %>%
ggplot()+
geom_point(aes(x=A,y=W),alpha=0.3)+
geom_smooth(aes(x=A,y=W)) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(modelr)       #Helpful Functions in Modeling
DATA=read_csv("AirWaterTemp.csv",col_types=cols()) #River Data
head(DATA)
ggplot(data=DATA) +
geom_point(aes(x=A,y=W),alpha=0.3)+
geom_smooth(aes(x=A,y=W)) +
theme_minimal()
ggplot(data=DATA) +
geom_point(aes(x=A,y=W),alpha=0.3)+
geom_smooth(aes(x=A,y=W)) +
theme_minimal()
Location = 103
DATA %>% filter(L==Location) %>%
ggplot()+
geom_point(aes(x=A,y=W),alpha=0.3)+
geom_smooth(aes(x=A,y=W)) +
theme_minimal()
(2.58*140/20)^2
(2.575*140/20)^2
shiny::runApp('Tutorial/R Shiny/Gapminder_Start')
runApp('Tutorial/R Shiny/Default')
runApp('Tutorial/R Shiny/Default')
runApp('Tutorial/R Shiny/Gapminder_Start')
runApp('Tutorial/R Shiny/Gapminder_Part1')
runApp('Tutorial/R Shiny/Gapminder_Part3')
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(rvest)        #Read Tables From Webpages
library(noncensus)    #Contains Zip Codes for US Cities
URL.VIOLENT="https://en.wikipedia.org/wiki/List_of_United_States_cities_by_crime_rate#Crime_rates_per_100.2C000_people_.282012.29"
VIOLENT = URL.VIOLENT %>%
read_html() %>%
html_table(fill=T) %>%
.[[1]]
str(VIOLENT)
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(rvest)        #Read Tables From Webpages
library(noncensus)    #Contains Zip Codes for US Cities
VIOLENT2=VIOLENT[-1,1:8]
colnames(VIOLENT2)=c("State","City","Population","Total","Murder","Rape","Robbery","Assault")
str(VIOLENT2)
URL.VIOLENT="https://en.wikipedia.org/wiki/List_of_United_States_cities_by_crime_rate#Crime_rates_per_100.2C000_people_.282012.29"
VIOLENT = URL.VIOLENT %>%
read_html() %>%
html_table(fill=T) %>%
.[[1]]
str(VIOLENT)
VIOLENT2=VIOLENT[-1,1:8]
colnames(VIOLENT2)=c("State","City","Population","Total","Murder","Rape","Robbery","Assault")
str(VIOLENT2)
View(VIOLENT)
VIOLENT3=VIOLENT2 %>%
mutate_at(3:8,as.numeric)
str(VIOLENT3)
VIOLENT3[str_detect(VIOLENT3$City,"[,(0-9){1}*]"),]$City
VIOLENT3[str_detect(VIOLENT3$City,"[,(0-9){1}]"),]$City
VIOLENT3[str_detect(VIOLENT3$City,"[,(0-9){1}*]"),]$City
VIOLENT3[str_detect(VIOLENT3$City,"[,(0-9){1}]"),]$City
VIOLENT4 = VIOLENT3 %>%
mutate(City=str_replace_all(City,"[,(0-9){1}]",""))
VIOLENT5 = VIOLENT4 %>%
mutate(City=ifelse(City=="Charlotte-Mecklenburg","Charlotte",City),
City=ifelse(City=="Savannah-Chatham Metropolitan","Savannah",City))
VIOLENT6 = VIOLENT5 %>%
mutate(City=str_replace(City,"Metropolitan",""))
write_csv(VIOLENT6,"FINAL_VIOLENT.CSV")
View(VIOLENT4)
View(VIOLENT5)
VIOLENT4 = VIOLENT3 %>%
mutate(City=str_replace_all(City,"[,(0-9){1}]",""))
VIOLENT5 = VIOLENT4 %>%
mutate(City=ifelse(City=="Charlotte-Mecklenburg","Charlotte",City),
City=ifelse(City=="Savannah-Chatham Metropolitan","Savannah",City),
City=ifelse(City=="Las Vegas Metropolitan Police Department","Las Vegas",City))
VIOLENT6 = VIOLENT5 %>%
mutate(City=str_replace(City,"Metropolitan",""))
write_csv(VIOLENT6,"FINAL_VIOLENT.CSV")
View(VIOLENT5)
VIOLENT4 = VIOLENT3 %>%
mutate(City=str_replace_all(City,"[,(0-9){1}]",""))
VIOLENT5 = VIOLENT4 %>%
mutate(City=ifelse(City=="Charlotte-Mecklenburg","Charlotte",City),
City=ifelse(City=="Savannah-Chatham Metropolitan","Savannah",City),
City=ifelse(City=="Las Vegas Metropolitan Police Department","Las Vegas",City))
VIOLENT6 = VIOLENT5 %>%
mutate(City=str_replace(City,"Metropolitan",""))
write_csv(VIOLENT6,"FINAL_VIOLENT.CSV")
data(zip_codes)
ZIP=zip_codes
str(ZIP)
ZIP2 = ZIP %>%
group_by(city,state) %>%
summarize(lat=mean(latitude),lon=mean(longitude)) %>%
ungroup()
write_csv(ZIP2,"FINAL_ZIP.CSV")
head(VIOLENT6[,1:4],3)
head(ZIP2,3)
URL.STATE_ABBREV = "https://state.1keydata.com/state-abbreviations.php"
STATE_ABBREV = URL.STATE_ABBREV %>%
read_html() %>%
html_table(fill=T) %>%
.[[3]] %>%
.[-1,]
head(STATE_ABBREV)
URL.STATE_ABBREV %>%
read_html() %>%
html_table(fill=T)
URL.STATE_ABBREV %>%
read_html() %>%
html_table(fill=T) %>%
.[[3]]
URL.STATE_ABBREV %>%
read_html() %>%
html_table(fill=T) %>%
.[[3]] %>%
.[-1,]
View(STATE_ABBREV)
head(STATE_ABBREV)
URL.STATE_ABBREV = "https://state.1keydata.com/state-abbreviations.php"
STATE_ABBREV = URL.STATE_ABBREV %>%
read_html() %>%
html_table(fill=T) %>%
.[[3]] %>%
.[-1,]
head(STATE_ABBREV)
STATE_ABBREV_TOP = STATE_ABBREV[,1:2]
names(STATE_ABBREV_TOP)=c("State","state")
STATE_ABBREV_BOT = STATE_ABBREV[,3:4]
names(STATE_ABBREV_BOT)=c("State","state")
STATE_ABBREV2=rbind(STATE_ABBREV_TOP,STATE_ABBREV_BOT) %>% arrange(State)
head(STATE_ABBREV2)
write_csv(STATE_ABBREV2,"FINAL_STATE_ABBREV.CSV")
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(rvest)        #Read Tables From Webpages
library(noncensus)    #Contains Zip Codes for US Cities
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(rvest)        #Read Tables From Webpages
library(noncensus)    #Contains Zip Codes for US Cities
VIOLENT4 = VIOLENT3 %>%
mutate(City=str_replace_all(City,"[,(0-9){1}]","")) %>%
mutate(State=str_replace_all(State,"[,(0-9){1}]",""))
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(rvest)        #Read Tables From Webpages
library(noncensus)    #Contains Zip Codes for US Cities
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(rvest)        #Read Tables From Webpages
library(noncensus)    #Contains Zip Codes for US Cities
VIOLENT4 = VIOLENT3 %>%
mutate(City=str_replace_all(City,"[,(0-9){1}]","")) %>%
mutate(State=str_replace_all(State,"[,(0-9){1}]",""))
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(rvest)        #Read Tables From Webpages
library(noncensus)    #Contains Zip Codes for US Cities
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(rvest)        #Read Tables From Webpages
library(noncensus)    #Contains Zip Codes for US Cities
VIOLENT3=VIOLENT2 %>%
mutate_at(3:8,as.numeric)
0*0.2+1*0.4+2*0.3+3*0.05+4*0.05
0.99*0.43+x*0.57
0.99*0.57+0.43*x
(1.35-0.99*0.57)/0.43
1.83*0.43+0.99*0.57
1.17-0.29
(0.93-0.29)/0.88
0.95*1.17+(1-0.95)*0.29
1.126-0.93
1/41.04
0.02436647*48
(1/41.04)*48
0.6*0.5=0.333
0.333/0.5
0.66*0.5
0.8*0.5
sqrt(0.219*(1-0.219)/32)
2*sqrt(0.219*(1-0.219)/32)
0.919-2*sqrt(0.919*(1-0.919)/260)
0.919+2*sqrt(0.919*(1-0.919)/260)
0.889-2*sqrt(0.889*(1-0.889)/27)
0.889+2*sqrt(0.889*(1-0.889)/27)

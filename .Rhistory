xlab("") + ylab("") +
theme_minimal()
ggplot(Social) +
geom_boxplot(aes(x=fct_reorder(race,tvhours,fun=median,na.rm=T),y=tvhours)) +
xlab("") + ylab("") +
theme_minimal()
ggplot(Social) +
geom_boxplot(aes(x=fct_reorder(race,tvhours,fun=mean,na.rm=T),y=tvhours)) +
xlab("") + ylab("") +
theme_minimal()
ggplot(Social) +
geom_boxplot(aes(x=fct_reorder(race,tvhours,fun=max,na.rm=T),y=tvhours)) +
xlab("") + ylab("") +
theme_minimal()
fct_reorder(race,tvhours,fun=max,na.rm=T)
ggplot(Social) +
geom_boxplot(aes(x=fct_reorder(race,tvhours,fun=mean,na.rm=T),y=tvhours)) +
xlab("") + ylab("") +
theme_minimal()
ggplot(race.summary) +
geom_point(aes(x=avg.tv,y=race),size=4) +
xlab("") + ylab("") +
theme_minimal()
ggplot(Social) +
geom_boxplot(aes(x=fct_reorder(race,tvhours),y=tvhours)) +
xlab("") + ylab("") +
theme_minimal()
ggplot(Social) +
geom_boxplot(aes(x=fct_reorder(race,tvhours,fun=median),y=tvhours)) +
xlab("") + ylab("") +
theme_minimal()
ggplot(Social) +
geom_boxplot(aes(x=fct_reorder(race,tvhours,fun=median,na.rm=T),y=tvhours)) +
xlab("") + ylab("") +
theme_minimal()
str(Social[,c("race","rincome")])
levels(Social$race)
levels(Social$rincome)
View(Social)
View(Social)
head(Social[,c("race","rincome")])
head(Social[,c("race","rincome")])
str(Social[,c("race","rincome")])
levels(Social$race)
levels(Social$rincome)
gss_cat %>%
mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%
ggplot(aes(marital)) +
geom_bar()
gss_cat %>%
mutate(marital = marital %>% fct_infreq()) %>%
ggplot(aes(marital)) +
geom_bar()
fct_rev(Social$rincome)
ggplot(Social) +
geom_point(aes(x=rincome,y=tvhours))
ggplot(Social) +
geom_point(aes(y=rincome,x=tvhours))
ggplot(Social) +
geom_point(aes(x=tvhours,y=rincome))
ggplot(Social) +
geom_boxplot(aes(x=tvhours,y=rincome))
ggplot(Social) +
geom_boxplot(aes(x=rincome,y=tvhours))
ggplot(Social) +
geom_boxplot(aes(x=rincome,y=tvhours)) +
coord_flip()
ggplot(Social) +
geom_boxplot(aes(x=rincome,y=tvhours)) +
coord_flip() +
theme_minimal()
ggplot(Social) +
geom_boxplot(aes(x=fct_rev(rincome),y=tvhours)) +
coord_flip() +
theme_minimal()
ggplot(Social) +
geom_boxplot(aes(x=fct_rev(fct_relevel(rincome,"Not Applicable")),y=tvhours)) +
coord_flip() +
theme_minimal()
ggplot(Social) +
geom_boxplot(aes(x=fct_rev(fct_relevel(rincome,"Not applicable")),y=tvhours)) +
coord_flip() +
theme_minimal()
Marriage = Social %>%
group_by(marital)
Marriage = Social %>%
count(marital)
Marriage
Marriage = Social %>%
count(marital) %>%
mutate(prop=n/sum(n))
Marriage
Marriage = Social %>%
count(marital) %>%
mutate(prop=n/sum(n))
print(Marriage)
Marriage2 = Social %>%
mutate(marital2=fct_recode(marital,
"No Answer"="NA",
"Never Married" = "Single"
)) %>%
count(marital,marital2) %>%
mutate(prop=n/sum(n))
print(Marriage2)
Marriage2 = Social %>%
mutate(marital2=fct_recode(marital,
"NA" = "No answer",
"Single" = "Never married"
)) %>%
count(marital,marital2) %>%
mutate(prop=n/sum(n))
print(Marriage2)
Marriage2 = Social %>%
mutate(marital2=fct_recode(marital,
"Unknown" = "No answer",
"Single" = "Never married"
)) %>%
count(marital,marital2) %>%
mutate(prop=n/sum(n))
print(Marriage2)
Marriage2 = Social %>%
mutate(marital2=fct_recode(marital,
"Unknown" = "No answer",
"Single" = "Never married"
)) %>%
count(marital,marital2) %>%
mutate(prop=n/sum(n))
print(Marriage2)
level(Social$marital)
levels(Social$marital)
levels(Social$marital)
Marriage3 = Social %>%
mutate(marital2=fct_collapse(marital,
Alone = levels(marital)[c(2,4,5)],
Together = levels(marital)[c(6)],
Confused = levels(marital)[c(1,3)]
)) %>%
group_by(marital,marital2) %>%
summarize(n=n())
print(Marriage3)
Marriage4 = Social %>%
mutate(marital2=fct_lump(marital)) %>%
group_by(marital,marital2) %>%
summarize(n=n()) %>%
ungroup() %>%
mutate(prop=n/sum(n))
print(Marriage4)
Marriage4 = Social %>%
mutate(marital2=fct_lump(marital)) %>%
count(marital,marital2) %>%
mutate(prop=n/sum(n))
print(Marriage4)
Marriage5 = Social %>%
mutate(marital2=fct_lump(marital)) %>%
count(marital,marital2) %>%
mutate(prop=n/sum(n))
print(Marriage5)
Marriage5 = Social %>%
mutate(marital2=fct_lump(marital,2)) %>%
count(marital,marital2) %>%
mutate(prop=n/sum(n))
print(Marriage5)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(modelr)
DATA=read_csv("AirWaterTemp.csv",col_types=cols()) #River Data
#1.1
NEST.DATA = DATA %>% group_by(L) %>% nest()
head(NEST.DATA)
#1.2
NEST.DATA %>% filter(L==103) %>% unnest() %>% glimpse()
NEST.DATA %>% filter(L!=103) %>% unnest() %>% glimpse()
#1.3
DATA2=DATA
DATA2$linpred=NA
TEST = NEST.DATA %>% filter(L==103) %>% unnest()
TRAIN  = NEST.DATA %>% filter(L!=103) %>% unnest()
linmod=lm(W~dplyr::lag(A,1),data=TRAIN)
linmodpred=predict(linmod,newdata=TEST)
DATA2$linpred[which(DATA2$L==103)]=linmodpred
head(DATA2)
#1.4
DATA2=DATA
DATA2$linpred=NA
for(k in unique(DATA2$L)){
TEST = NEST.DATA %>% filter(L==k) %>% unnest()
TRAIN  = NEST.DATA %>% filter(L!=k) %>% unnest()
linmod=lm(W~A,data=TRAIN)
linmodpred=predict(linmod,newdata=TEST)
DATA2$linpred[which(DATA2$L==k)]=linmodpred
}
#1.5
RMSE.func=function(actual,predict){
mse=mean((actual-predict)^2,na.rm=T)
rmse=sqrt(mse)
return(rmse)
}
RMSE.func(actual=DATA2$W,predict=DATA2$linpred)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(modelr)
DATA=read_csv("AirWaterTemp.csv",col_types=cols()) #River Data
#1.1
NEST.DATA = DATA %>% group_by(L) %>% nest()
head(NEST.DATA)
#1.2
NEST.DATA %>% filter(L==103) %>% unnest() %>% glimpse()
NEST.DATA %>% filter(L!=103) %>% unnest() %>% glimpse()
#1.3
DATA2=DATA
DATA2$linpred=NA
TEST = NEST.DATA %>% filter(L==103) %>% unnest()
TRAIN  = NEST.DATA %>% filter(L!=103) %>% unnest()
linmod=lm(W~dplyr::lag(A,1),data=TRAIN)
linmodpred=predict(linmod,newdata=TEST)
DATA2$linpred[which(DATA2$L==103)]=linmodpred
head(DATA2)
#1.4
DATA2=DATA
DATA2$linpred=NA
for(k in unique(DATA2$L)){
TEST = NEST.DATA %>% filter(L==k) %>% unnest()
TRAIN  = NEST.DATA %>% filter(L!=k) %>% unnest()
linmod=lm(W~A,data=TRAIN)
linmodpred=predict(linmod,newdata=TEST)
DATA2$linpred[which(DATA2$L==k)]=linmodpred
}
#1.5
RMSE.func=function(actual,predict){
mse=mean((actual-predict)^2,na.rm=T)
rmse=sqrt(mse)
return(rmse)
}
RMSE.func(actual=DATA2$W,predict=DATA2$linpred)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(modelr)
DATA=read_csv("AirWaterTemp.csv",col_types=cols()) #River Data
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(modelr)
library(broom)
CONDIMENT=read_csv("Condiments.csv")
View(CONDIMENT)
ggplot(CONDIMENT) +
geom_histogram(aes(x=Enjoyment))
ggplot(CONDIMENT) +
geom_histogram(aes(x=Enjoyment),color="lightskyblue2")
ggplot(CONDIMENT) +
geom_histogram(aes(x=Enjoyment),fill="lightskyblue2")
ggplot(CONDIMENT) +
geom_histogram(aes(x=Enjoyment),fill="lightskyblue2") +
theme_minimal()
ggplot(CONDIMENT) +
geom_bar(aes(x=Food),fill="lightskyblue2") +
theme_minimal()
ggplot(CONDIMENT) +
geom_bar(aes(x=Condiment),fill="lightskyblue2") +
theme_minimal()
ggplot(CONDIMENT) +
geom_bar(aes(x=Food),fill="lightskyblue2") +
theme_minimal(base_size=18)
ggplot(CONDIMENT) +
geom_bar(aes(x=Condiment),fill="lightskyblue2") +
theme_minimal(base_size=18)
EvsF.Model=lm(Enjoyment~Food,data=Condiment)
EvsF.Model=lm(Enjoyment~Food,data=CONDIMENT)
glance(EvsF.Model)
tidy(EvsF.Model)
EvsC.Model=lm(Enjoyment~Condiment,data=CONDIMENT)
tidy(EvsC.Model)
model_matrix(EvsC.Model)
model_matrix(CONDIMENT, Enjoyment~Food)
cbind(CONDIMENT,model_matrix(CONDIMENT, Enjoyment~Food))
model_matrix(CONDIMENT, Enjoyment~Food))
model_matrix(CONDIMENT, Enjoyment~Food)
model_matrix(CONDIMENT, Enjoyment~Food)
CONDIMENT$Food
CONDIMENT$Food
model_matrix(CONDIMENT, Enjoyment~Food)
CONDIMENT$Food
model_matrix(CONDIMENT, Enjoyment~Food)
CONDIMENT$Food
model_matrix(CONDIMENT, Enjoyment~Food)
CONDIMENT$Food[1:6]
head(model_matrix(CONDIMENT, Enjoyment~Food))
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(modelr)
library(broom)
library(titanic)
TRAIN=titanic_train[,c(2,3,5,6,7,8,10,12)]
TEST=titanic_test[,c(2,4,5,6,7,9,11)]
ggplot(TRAIN) + geom_point(aes(x=Fare,y=Survived)) + theme_minimal() +
geom_smooth(aes(x=Fare,y=Survived),method="lm",alpha=0.3,color="gold") +
geom_smooth(aes(x=Fare,y=Survived),method="glm",
method.args=list(family="binomial"),color="deepskyblue1") +
geom_hline(yintercept=0.5,linetype="dashed",size=2,alpha=0.3)
ggplot(TRAIN) + geom_point(aes(x=Age,y=Survived)) + theme_minimal() +
geom_smooth(aes(x=Age,y=Survived),method="glm",
method.args=list(family="binomial"),color="deepskyblue1") +
geom_hline(yintercept=0.5,linetype="dashed",size=2,alpha=0.3)
TRAIN %>%
mutate(Sex=factor(Sex)) %>%
group_by(Sex) %>%
summarize(Prop.Survived=mean(Survived)) %>%
ggplot() +
geom_bar(aes(x=Sex,y=Prop.Survived),
stat="Identity",fill="deepskyblue1") +
theme_minimal() +
theme(text=element_text(size=20))
set.seed(216)
sample.in=sample(1:dim(TRAIN)[1],size=floor(0.8*dim(TRAIN)[1]))
TRAIN.IN=TRAIN[sample.in,c("Survived","Fare","Sex","Age")]
TRAIN.OUT=TRAIN[-sample.in,c("Survived","Fare","Sex","Age")]
logmod1=glm(Survived~.^3,family="binomial",data=TRAIN.IN)
tidy(logmod1)[,c("term","estimate","p.value")]
logmod2=glm(Survived~.*.,family="binomial",data=TRAIN.IN)
tidy(logmod2)[,c("term","estimate","p.value")]
logmod3=glm(Survived~.,family="binomial",data=TRAIN.IN)
tidy(logmod3)[,c("term","estimate","p.value")]
TRAIN.OUT2 = TRAIN.OUT %>%
mutate(p1=predict(logmod1,newdata=TRAIN.OUT,type="response"),
p2=predict(logmod2,newdata=TRAIN.OUT,type="response"),
p3=predict(logmod3,newdata=TRAIN.OUT,type="response")) %>%
select(Survived,p1,p2,p3) %>%
mutate(S1=ifelse(p1<0.5,0,1),
S2=ifelse(p2<0.5,0,1),
S3=ifelse(p3<0.5,0,1))
head(TRAIN.OUT2,10)
TRAIN.OUT3=na.omit(TRAIN.OUT2)
head(TRAIN.OUT3,20)
mean(TRAIN.OUT3$S1==TRAIN.OUT3$S2)
mean(TRAIN.OUT3$S2==TRAIN.OUT3$S3)
TRAIN.OUT4=TRAIN.OUT3 %>% select(-p2,-S2)
head(TRAIN.OUT4,8)
table(TRAIN.OUT$Survived,TRAIN.OUT4$S1)
RESULTS1=table(TRAIN.OUT4$Survived,TRAIN.OUT4$S1)
RESULTS3=table()
table(TRAIN.OUT4$Survived,TRAIN.OUT4$S1)
RESULTS1=table(TRAIN.OUT4$Survived,TRAIN.OUT4$S1) %>% prop.table()
RESULTS3=table(TRAIN.OUT4$Survived,TRAIN.OUT4$S3) %>% prop.table()
library(xtable)
print(RESULTS1)
library(xtable)
RESULTS1=table(TRAIN.OUT4$Survived,TRAIN.OUT4$S1) %>% prop.table()
print(RESULTS1)
RESULTS3=table(TRAIN.OUT4$Survived,TRAIN.OUT4$S3) %>% prop.table()
print(RESULTS3)
table(TRAIN.OUT4$Survived,TRAIN.OUT4$S3) %>% prop.table() %>% rownames()
TRAIN.OUT4$Survived
factor(TRAIN.OUT4$Survived,levels=c("Did Not Survive","Survived"))
factor(TRAIN.OUT4$Survived,levels=c("Did Not Survive"=0,"Survived"=1))
factor(TRAIN.OUT4$Survived,levels=c(0="Did Not Survive",1="Survived"))
factor(TRAIN.OUT4$Survived,levels=c(0="Did Not Survive",1="Survived"))
factor(TRAIN.OUT4$Survived,levels=c("Did Not Survive","Survived"))
TRAIN.OUT5 %>%
mutate(Survived=factor(Survived),S1=factor(S1),S2=factor(S2))
TRAIN.OUT5 = TRAIN.OUT4 %>%
mutate(Survived=factor(Survived),S1=factor(S1),S2=factor(S2))
View(TRAIN.OUT4)
head(TRAIN.OUT5)
TRAIN.OUT4=TRAIN.OUT3 %>% select(-p2,-S2)
head(TRAIN.OUT4,8)
TRAIN.OUT5 = TRAIN.OUT4 %>%
mutate(Survived=factor(Survived),S1=factor(S1),S2=factor(S2))
TRAIN.OUT5 = TRAIN.OUT4 %>%
mutate(Survived=factor(Survived),S1=factor(S1),S2=factor(S3))
head(TRAIN.OUT5)
TRAIN.OUT5 = TRAIN.OUT4 %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3))
head(TRAIN.OUT5)
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3))
head(TRAIN.OUT5)
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3)) %>%
mutate(Survived=fct_recode(Survived,"Survived"=1,"Died"=0),
S1=fct_recode(S1,"Will Survive"=1,"Will Die"=0),
S3=fct_recode(S3,"Will Survive"=1,"Will Die"=0))
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3))
fct_recode(TRAIN.OUT5$Survived)
fct_recode(TRAIN.OUT5$Survived, "Will Survive"=1)
fct_recode(TRAIN.OUT5$Survived, "Will Survive"="1")
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3)) %>%
mutate(Survived=fct_recode(Survived,"Survived"="1","Died"="0"),
S1=fct_recode(S1,"Will Survive"="1","Will Die"="0"),
S3=fct_recode(S3,"Will Survive"="1","Will Die"="0"))
head(TRAIN.OUT5)
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3)) %>%
mutate(Survived=fct_recode(Survived,"Survived"="1","Died"="0"),
S1=fct_recode(S1,"Will Survive"="1","Will Die"="0"),
S3=fct_recode(S3,"Will Survive"="1","Will Die"="0"))
head(TRAIN.OUT5)
TRAIN.OUT5$S1
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3)) %>%
mutate(Survived=fct_recode(Survived,"Survived"="1","Died"="0"),
S1=fct_recode(S1,"Will Survive"="1","Will Die"="0"),
S3=fct_recode(S3,"Will Survive"="1","Will Die"="0"))
head(TRAIN.OUT5)
table(factor(TRAIN.OUT5$Survived,TRAIN.OUT5$S1) %>% prop.table()
TRAIN.OUT5 = TRAIN.OUT4 %>%
table(factor(TRAIN.OUT5$Survived,TRAIN.OUT5$S1) %>% prop.table()
table(factor(TRAIN.OUT5$Survived,TRAIN.OUT5$S1) %>% prop.table()
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3)) %>%
mutate(Survived=fct_recode(Survived,"Survived"="1","Died"="0"),
S1=fct_recode(S1,"Will Survive"="1","Will Die"="0"),
S3=fct_recode(S3,"Will Survive"="1","Will Die"="0"))
head(TRAIN.OUT5)
table(factor(TRAIN.OUT5$Survived,TRAIN.OUT5$S1) %>% prop.table()
table(TRAIN.OUT5$Survived,TRAIN.OUT5$S1) %>% prop.table()
table(TRAIN.OUT5$Survived,TRAIN.OUT5$S1)
table(TRAIN.OUT5$Survived,TRAIN.OUT5$S1) %>% prop.table()
RESULTS1=table(TRAIN.OUT5$Survived,TRAIN.OUT5$S1) %>% prop.table()
print(RESULTS1)
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3)) %>%
mutate(Survived=fct_recode(Survived,"Survived"="1","Died"="0"),
S1=fct_recode(S1,"Will Survive"="1","Will Die"="0"),
S3=fct_recode(S3,"Will Survive"="1","Will Die"="0")) %>%
mutate(Survived=fct_reorder(Survived))
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3)) %>%
mutate(Survived=fct_recode(Survived,"Survived"="1","Died"="0"),
S1=fct_recode(S1,"Will Survive"="1","Will Die"="0"),
S3=fct_recode(S3,"Will Survive"="1","Will Die"="0")) %>%
mutate(Survived=fct_reorder(Survived,c(0,1)))
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3)) %>%
mutate(Survived=fct_recode(Survived,"Survived"="1","Died"="0"),
S1=fct_recode(S1,"Will Survive"="1","Will Die"="0"),
S3=fct_recode(S3,"Will Survive"="1","Will Die"="0")) %>%
mutate(Survived=factor(Survived,levels=c("Survived","Died")))
head(TRAIN.OUT5)
TRAIN.OUT5 = TRAIN.OUT4 %>%
select(-p1,-p3) %>%
mutate(Survived=factor(Survived),S1=factor(S1),S3=factor(S3)) %>%
mutate(Survived=fct_recode(Survived,"Survived"="1","Died"="0"),
S1=fct_recode(S1,"Will Survive"="1","Will Die"="0"),
S3=fct_recode(S3,"Will Survive"="1","Will Die"="0")) %>%
mutate(Survived=factor(Survived,levels=c("Survived","Died")),
S1=factor(S1,levels=c("Will Survive","Will Die")),
S3=factor(S3,levels=c("Will Survive","Will Die")))
head(TRAIN.OUT5)
library(xtable)
RESULTS1=table(TRAIN.OUT5$Survived,TRAIN.OUT5$S1) %>% prop.table()
print(RESULTS1)
RESULTS3=table(TRAIN.OUT4$Survived,TRAIN.OUT4$S3) %>% prop.table()
print(RESULTS3)
library(xtable)
RESULTS1=table(TRAIN.OUT5$Survived,TRAIN.OUT5$S1) %>% prop.table()
print(RESULTS1)
RESULTS3=table(TRAIN.OUT5$Survived,TRAIN.OUT5$S3) %>% prop.table()
print(RESULTS3)
sum(RESULTS[1,]
)
RESULTS1[1,1]/sum(RESULTS1[1,])
ERROR.RESULTS = tibble(
Model=c("3 Way","No Way"),
Sensitivity=c(RESULTS1[1,1]/sum(RESULTS1[1,],RESULTS3[1,1]/sum(RESULTS3[1,])
)
ERROR.RESULTS = tibble(
Model=c("3 Way","No Way"),
Sensitivity=c(RESULTS1[1,1]/sum(RESULTS1[1,],RESULTS3[1,1]/sum(RESULTS3[1,])
)
RESULTS1=table(TRAIN.OUT5$Survived,TRAIN.OUT5$S1) %>%
prop.table()
print(RESULTS1)
RESULTS3=table(TRAIN.OUT5$Survived,TRAIN.OUT5$S3) %>%
prop.table()
print(RESULTS3)
RESULTS1[1,1]
ERROR.RESULTS = tibble(
Model=c("3 Way","No Way"),
Sensitivity=c(RESULTS1[1,1]/sum(RESULTS1[1,]),RESULTS3[1,1]/sum(RESULTS3[1,])),
Specificity=c(RESULTS1[2,2]/sum(RESULTS1[2,]),RESULTS3[2,2]/sum(RESULTS3[2,])),
FPR=c(RESULTS1[1,2]/sum(RESULTS1[1,]),RESULTS3[1,1]/sum(RESULTS3[1,])),
FNR=c(RESULTS1[2,1]/sum(RESULTS1[2,]),RESULTS3[2,2]/sum(RESULTS3[2,]))
)
ERROR.RESULTS = tibble(
Model=c("3 Way","No Way"),
Sensitivity=c(RESULTS1[1,1]/sum(RESULTS1[1,]),RESULTS3[1,1]/sum(RESULTS3[1,])),
Specificity=c(RESULTS1[2,2]/sum(RESULTS1[2,]),RESULTS3[2,2]/sum(RESULTS3[2,])),
FPR=c(RESULTS1[1,2]/sum(RESULTS1[1,]),RESULTS3[1,1]/sum(RESULTS3[1,])),
FNR=c(RESULTS1[2,1]/sum(RESULTS1[2,]),RESULTS3[2,2]/sum(RESULTS3[2,]))
)
print(ERROR.RESULTS)
ERROR.RESULTS = tibble(
Model=c("3 Way","No Way"),
Sensitivity=c(RESULTS1[1,1]/sum(RESULTS1[1,]),RESULTS3[1,1]/sum(RESULTS3[1,])),
Specificity=c(RESULTS1[2,2]/sum(RESULTS1[2,]),RESULTS3[2,2]/sum(RESULTS3[2,])),
FPR=c(RESULTS1[1,2]/sum(RESULTS1[1,]),RESULTS3[1,2]/sum(RESULTS3[1,])),
FNR=c(RESULTS1[2,1]/sum(RESULTS1[2,]),RESULTS3[2,1]/sum(RESULTS3[2,]))
)
print(ERROR.RESULTS)

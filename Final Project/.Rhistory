options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
DATA=na.omit(read_csv("AirWaterTemp.csv"))
glimpse(DATA)
set.seed(216) #DO NOT CHANGE
DATA2 = DATA %>% crossv_kfold(10)
head(DATA2) #DO NOT CHANGE
x=c(1,3,4) #DO NOT CHANGE
y=c(0,0,0) #DO NOT CHANGE
RMSE.func=function(actual,predict){
mse=mean((actual-predict)^2,na.rm=T)
rmse=sqrt(mse)
return(rmse)
}
RMSE.func(actual=x,predict=y) #DO NOT CHANGE
train.model.func=function(data,I,J){
mod=lm(W~poly(A,I)+poly(D,J),data=data)
return(mod)
}
OUT.RMSE=matrix(NA,10,10) #DO NOT CHANGE
for(i in 1:10){
for(j in 1:10){
MOD.DATA=DATA2 %>% mutate(tr.model=map(train,train.model.func,I=i,J=j))
MOD.PREDICT = MOD.DATA %>%
mutate(predict=map2(test,tr.model,~augment(.y,newdata=.x))) %>%
select(predict) %>%
unnest()
OUT.RMSE[i,j]=RMSE.func(actual=MOD.PREDICT$W,predict=MOD.PREDICT$.fitted)
}
}
print(OUT.RMSE) #DO NOT CHANGE
OUT.RMSE2=as.tibble(OUT.RMSE) %>%
mutate(I=1:10) %>%
rename(`1`=V1,`2`=V2,`3`=V3,`4`=V4,`5`=V5,`6`=V6,`7`=V7,`8`=V8,`9`=V9,`10`=V10) %>%
select(I,everything()) %>%
gather(`1`:`10`,key="J",value="RMSE",convert=T) %>%
mutate(I=as.factor(I),J=as.factor(J))
head(OUT.RMSE2)
BEST5.RMSE = OUT.RMSE2 %>% filter(min_rank(RMSE)<=5)
head(BEST5.RMSE) #DO NOT CHANGE
ggplot(DATA) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
theme_minimal() +
xlab("Julian Day")+
ylab("Max Water Temperature")
BEST5.DATA=DATA %>%
mutate(First=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[1]))+poly(D,as.numeric(BEST5.RMSE$J[1])),data=DATA)),
Second=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[2]))+poly(D,as.numeric(BEST5.RMSE$J[2])),data=DATA)),
Third=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[3]))+poly(D,as.numeric(BEST5.RMSE$J[3])),data=DATA)),
Fourth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[4]))+poly(D,as.numeric(BEST5.RMSE$J[4])),data=DATA)),
Fifth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[5]))+poly(D,as.numeric(BEST5.RMSE$J[5])),data=DATA)))
BEST5.DATA2 = BEST5.DATA %>% gather(First:Fifth,key="Model",value="Predict",factor_key=T)
head(BEST5.DATA2) #DO NOT CHANGE
ggplot(BEST5.DATA2) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
theme_minimal() +
xlab("Julian Day")+
ylab("Max Water Temperature") +
geom_line(aes(x=D,y=Predict,color=Model))
OUT.RMSE2 %>%
group_by(I) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=I,y=avgRMSE))+
geom_line(aes(x=I,y=avgRMSE,group=1))
OUT.RMSE2 %>%
group_by(I) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=I,y=avgRMSE))+
geom_line(aes(x=I,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(J) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=J,y=avgRMSE))+
geom_line(aes(x=J,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(I) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=I,y=avgRMSE))+
geom_line(aes(x=I,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(J) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=J,y=avgRMSE))+
geom_line(aes(x=J,y=avgRMSE,group=1)) +
theme_minimal()
DATA %>% mutate(fitted=train.model.func(DATA,BEST.CHOICE[1],BEST.CHOICE[2]))
BEST.func=function(data){
loc=which.min(data$RMSE)
return(as.vector(data[loc,c(1,2)]))
}
BEST.CHOICE=BEST.func(data=OUT.RMSE2) #DO NOT CHANGE
print(BEST.CHOICE) #DO NOT CHANGE
DATA %>% mutate(fitted=train.model.func(DATA,BEST.CHOICE[1],BEST.CHOICE[2]))
DATA %>% mutate(fitted=train.model.func(DATA,BEST.CHOICE[1],BEST.CHOICE[2]))
train.model.func(DATA,BEST.CHOICE[1],BEST.CHOICE[2])
BEST.CHOICE[1]
BEST.CHOICE[2]
DATA
train.model.func(DATA,BEST.CHOICE[1],BEST.CHOICE[2])
mutate(fitted=train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2])
DATA %>% mutate(fitted=train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))
DATA %>% mutate(fitted=train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))
train.model.func
DATA
lm(W~poly(A,BEST.CHOICE[1])+poly(D,BEST.CHOICE[2]),data=DATA)
BEST.CHOICE[1]
lm(W~poly(A,3)+poly(D,6),data=DATA)
BEST.CHOICE
BEST.CHOICE$J
mutate(fitted=train.model.func(DATA,I=BEST.CHOICE$I,J=BEST.CHOICE$J]))
BEST.func=function(data){
loc=which.min(data$RMSE)
return(as.numeric(as.vector(data[loc,c(1,2)])))
}
BEST.CHOICE=BEST.func(data=OUT.RMSE2) #DO NOT CHANGE
print(BEST.CHOICE) #DO NOT CHANGE
DATA %>% mutate(fitted=train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]]))
BEST.func=function(data){
loc=which.min(data$RMSE)
return(as.numeric(as.vector(data[loc,c(1,2)])))
}
BEST.CHOICE=BEST.func(data=OUT.RMSE2) #DO NOT CHANGE
print(BEST.CHOICE) #DO NOT CHANGE
DATA %>% mutate(fitted=train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]]))
DATA %>% mutate(fitted=train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))
BEST.CHOICE[1]
BEST.CHOICE[2]
DATA %>% mutate(fitted=train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))
DATA %>% mutate(fitted=train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))
DATA %>% mutate(fitted=train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))
train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]
train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2])
train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2])
DATA %>% mutate(fitted=predict(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2])))
lm(W~poly(A,3)+poly(D,6),data=DATA)
DATA %>% mutate(fitted=predict(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot()%>%
geom_point(aes(x=W,y=fitted))
DATA %>% mutate(fitted=predict(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot()%>%
geom_point(aes(x=W,y=fitted))
DATA %>% mutate(fitted=predict(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=W,y=fitted))
DATA %>% mutate(fitted=predict(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=W,y=fitted)) +
xlab("Actual Max Water Temperature") +
ylab("Fitted Max Water Temperature") +
geom_abline(a=0,b=1,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=fitted)) +
xlab("Actual Max Water Temperature") +
ylab("Fitted Max Water Temperature") +
geom_abline(a=0,b=1,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=fitted)) +
xlab("Actual Max Water Temperature") +
ylab("Fitted Max Water Temperature") +
geom_abline(a=0,b=1,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_abline(a=0,b=1,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_abline(a=0,b=1,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_abline(a=0,b=1,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_abline(a=0,b=1,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_abline(a=0,b=1,color="blue")
mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2])))
residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))
residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_abline(a=0,b=1,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_hline(yintercept=0,color="blue")
